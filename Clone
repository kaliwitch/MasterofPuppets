
Puppeteer- CLONE- Await



const puppeteer = require("puppeteer-extra");
const fs = require("fs");
const path = require("path");
const StealthPlugin = require("puppeteer-extra-plugin-stealth");
const axios = require("axios");


(async () => {

  const browser = await puppeteer.launch();
  const page = await browser.newPage();

  
  const url = "https://www.example.com/";
  await page.goto(url, { waitUntil: "networkidle0" });


  const html = await page.content();

 
  const styles = await page.evaluate(() => {
    let css = "";
  
    document.querySelectorAll("style").forEach((styleTag) => {
      css += styleTag.innerHTML;
    });
    
    document.querySelectorAll('link[rel="stylesheet"]').forEach((linkTag) => {
      css += `@import url('${linkTag.href}');\n`;
    });
    return css;
  });

 
  const scripts = await page.evaluate(() => {
    let js = "";
    document.querySelectorAll("script").forEach((scriptTag) => {
      if (scriptTag.src === "") {
        js += scriptTag.innerHTML;
      }
    });
    return js;
  });

  const outputDir = "./scraped-site";
  if (!fs.existsSync(outputDir)) fs.mkdirSync(outputDir);

  fs.writeFileSync(path.join(outputDir, "index.html"), html);
  fs.writeFileSync(path.join(outputDir, "styles.css"), styles);
  fs.writeFileSync(path.join(outputDir, "scripts.js"), scripts);

  console.log("Website saved successfully! ðŸ¥·ðŸ’»");


  await browser.close();
})();
